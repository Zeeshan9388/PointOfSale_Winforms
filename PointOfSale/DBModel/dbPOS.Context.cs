//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PointOfSale.DBModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbPOSEntities : DbContext
    {
        public dbPOSEntities()
            : base("name=dbPOSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbl_Account> tbl_Account { get; set; }
        public virtual DbSet<tbl_AccountType> tbl_AccountType { get; set; }
        public virtual DbSet<tbl_AlertResults> tbl_AlertResults { get; set; }
        public virtual DbSet<tbl_AssignMenu> tbl_AssignMenu { get; set; }
        public virtual DbSet<tbl_Customer> tbl_Customer { get; set; }
        public virtual DbSet<tbl_Deal> tbl_Deal { get; set; }
        public virtual DbSet<tbl_GST> tbl_GST { get; set; }
        public virtual DbSet<tbl_ItemCategory> tbl_ItemCategory { get; set; }
        public virtual DbSet<tbl_Items> tbl_Items { get; set; }
        public virtual DbSet<tbl_Menu_Master> tbl_Menu_Master { get; set; }
        public virtual DbSet<tbl_Role> tbl_Role { get; set; }
        public virtual DbSet<tbl_Sales> tbl_Sales { get; set; }
        public virtual DbSet<tbl_SalesDetails> tbl_SalesDetails { get; set; }
        public virtual DbSet<tbl_Size> tbl_Size { get; set; }
        public virtual DbSet<tbl_SubMenu> tbl_SubMenu { get; set; }
        public virtual DbSet<tbl_User> tbl_User { get; set; }
        public virtual DbSet<tblProject> tblProjects { get; set; }
        public virtual DbSet<tblSp> tblSps { get; set; }
        public virtual DbSet<Vu_Category> Vu_Category { get; set; }
        public virtual DbSet<Vu_Items> Vu_Items { get; set; }
        public virtual DbSet<Vu_Sales> Vu_Sales { get; set; }
    
        public virtual ObjectResult<string> sp_add(string project, string sP)
        {
            var projectParameter = project != null ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(string));
    
            var sPParameter = sP != null ?
                new ObjectParameter("SP", sP) :
                new ObjectParameter("SP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_add", projectParameter, sPParameter);
        }
    
        public virtual ObjectResult<string> SP_Category(Nullable<long> iD, string category, Nullable<int> createdBy, Nullable<int> query)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_Category", iDParameter, categoryParameter, createdByParameter, queryParameter);
        }
    
        public virtual ObjectResult<sp_getsplst_Result> sp_getsplst()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getsplst_Result>("sp_getsplst");
        }
    
        public virtual ObjectResult<string> SP_Items(Nullable<long> iD, Nullable<int> catID, string items, Nullable<int> createdBy, Nullable<int> query)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(int));
    
            var itemsParameter = items != null ?
                new ObjectParameter("Items", items) :
                new ObjectParameter("Items", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_Items", iDParameter, catIDParameter, itemsParameter, createdByParameter, queryParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Login(string name, string email, string password)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Login", nameParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> SP_Menu(Nullable<long> iD, Nullable<long> mID, string menuText, string menuLink, string menuIco, Nullable<long> createdBy, Nullable<int> query)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var mIDParameter = mID.HasValue ?
                new ObjectParameter("MID", mID) :
                new ObjectParameter("MID", typeof(long));
    
            var menuTextParameter = menuText != null ?
                new ObjectParameter("MenuText", menuText) :
                new ObjectParameter("MenuText", typeof(string));
    
            var menuLinkParameter = menuLink != null ?
                new ObjectParameter("MenuLink", menuLink) :
                new ObjectParameter("MenuLink", typeof(string));
    
            var menuIcoParameter = menuIco != null ?
                new ObjectParameter("MenuIco", menuIco) :
                new ObjectParameter("MenuIco", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(long));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_Menu", iDParameter, mIDParameter, menuTextParameter, menuLinkParameter, menuIcoParameter, createdByParameter, queryParameter);
        }
    
        public virtual int Sp_Sales(Nullable<decimal> iD, Nullable<decimal> sales, Nullable<decimal> cusID, Nullable<decimal> createdBy, Nullable<decimal> payamount, Nullable<decimal> returnamount, Nullable<int> query)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(decimal));
    
            var salesParameter = sales.HasValue ?
                new ObjectParameter("Sales", sales) :
                new ObjectParameter("Sales", typeof(decimal));
    
            var cusIDParameter = cusID.HasValue ?
                new ObjectParameter("CusID", cusID) :
                new ObjectParameter("CusID", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(decimal));
    
            var payamountParameter = payamount.HasValue ?
                new ObjectParameter("Payamount", payamount) :
                new ObjectParameter("Payamount", typeof(decimal));
    
            var returnamountParameter = returnamount.HasValue ?
                new ObjectParameter("Returnamount", returnamount) :
                new ObjectParameter("Returnamount", typeof(decimal));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Sales", iDParameter, salesParameter, cusIDParameter, createdByParameter, payamountParameter, returnamountParameter, queryParameter);
        }
    
        public virtual ObjectResult<string> SP_Size(Nullable<long> iD, Nullable<long> catID, Nullable<long> itemID, string size, Nullable<decimal> price, Nullable<long> stock, Nullable<decimal> retailPrice, Nullable<int> createdBy, Nullable<int> query)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var catIDParameter = catID.HasValue ?
                new ObjectParameter("CatID", catID) :
                new ObjectParameter("CatID", typeof(long));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(long));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(long));
    
            var retailPriceParameter = retailPrice.HasValue ?
                new ObjectParameter("RetailPrice", retailPrice) :
                new ObjectParameter("RetailPrice", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_Size", iDParameter, catIDParameter, itemIDParameter, sizeParameter, priceParameter, stockParameter, retailPriceParameter, createdByParameter, queryParameter);
        }
    
        public virtual int sp_user(Nullable<int> id, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_user", idParameter, nameParameter);
        }
    
        public virtual ObjectResult<string> Sp_UserRegistration(Nullable<int> iD, Nullable<int> roleID, string name, string password, string email, string cell, string pic, Nullable<int> query)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var cellParameter = cell != null ?
                new ObjectParameter("cell", cell) :
                new ObjectParameter("cell", typeof(string));
    
            var picParameter = pic != null ?
                new ObjectParameter("pic", pic) :
                new ObjectParameter("pic", typeof(string));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_UserRegistration", iDParameter, roleIDParameter, nameParameter, passwordParameter, emailParameter, cellParameter, picParameter, queryParameter);
        }
    
        public virtual ObjectResult<string> SPUserRegistration(Nullable<int> iD, Nullable<int> roleID, string name, string password, string email, string cell, string pic, Nullable<int> query)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var cellParameter = cell != null ?
                new ObjectParameter("cell", cell) :
                new ObjectParameter("cell", typeof(string));
    
            var picParameter = pic != null ?
                new ObjectParameter("pic", pic) :
                new ObjectParameter("pic", typeof(string));
    
            var queryParameter = query.HasValue ?
                new ObjectParameter("query", query) :
                new ObjectParameter("query", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPUserRegistration", iDParameter, roleIDParameter, nameParameter, passwordParameter, emailParameter, cellParameter, picParameter, queryParameter);
        }
    }
}
